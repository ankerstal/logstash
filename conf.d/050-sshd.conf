filter {
	if [program] == "sshd" {
		grok {
			match => [
				"message", "Connection from %{IP:clientip} port %{NUMBER:ssh_src_port} on %{IP:ssh_server_ip} port %{NUMBER:ssh_dst_port}",
				"message", "Bad protocol version identification \'%{GREEDYDATA:ssh_version_identification}\' from %{IP:clientip} port %{NUMBER:ssh_dst_port}",
	    		"message", "Starting session: (%{USERNAME:ssh_session_type}( on (?<ssh_tty>[ptsy0-9/]+))?|(%{USERNAME:ssh_session_type} \'%{USERNAME:ssh_session_config}\')?|(%{USERNAME:ssh_session_type} \(%{USERNAME:ssh_session_config}\) \'%{PATH:ssh_session_action}\'))? for %{WORD:ssh_username} from %{IP:clientip} port %{NUMBER:ssh_src_port}",
				"message", "Close session: user %{WORD:ssh_username} from %{IP:clientip} port %{NUMBER:ssh_src_port} %{GREEDYDATA}",
				"message", "Disconnected from %{IP:clientip} port %{NUMBER:ssh_src_port}(%{GREEDYDATA})?",
				"message", "Failed %{WORD:ssh_authtype} for( invalid user)? %{WORD:ssh_username} from %{IP:clientip} port %{NUMBER:ssh_src_port} %{WORD:ssh_protocol}(: %{USERNAME:ssh_key_type}( SHA256:(?<ssh_key_hash>[+a-zA-Z0-9/_-]+))?( ID %{GREEDYDATA:ssh_cert_id} \(serial %{NUMBER:ssh_cert_serial}\) %{GREEDYDATA:ssh_ca_type} SHA256:%{GREEDYDATA:ssh_ca_hash})?)?",
				"message", "Accepted %{WORD:ssh_authtype} for %{WORD:ssh_username} from %{IP:clientip} port %{NUMBER:ssh_src_port} %{WORD:ssh_protocol}(:)?( %{USERNAME:ssh_key_type})?( SHA256:(?<ssh_key_hash>[+a-zA-Z0-9/_-]+))?( ID %{GREEDYDATA:ssh_cert_id} \(serial %{NUMBER:ssh_cert_serial}\))?( %{GREEDYDATA:ssh_ca_type} SHA256:(?<ssh_ca_hash>[+a-zA-Z0-9/_-]+))?",
				"message", "Accepted %{WORD:ssh_authtype} ID \"%{GREEDYDATA:ssh_cert_id}\" \(serial %{NUMBER:ssh_cert_serial}\) signed by %{GREEDYDATA:ssh_ca_type} SHA256:(?<ssh_ca_hash>[+a-zA-Z0-9/_-]+) via %{PATH:ssh_ca_file}"
			]
		}
		if [message] =~ /^Connection from/ {
		 	mutate {
		 		add_tag => [ "ssh.connection_open" ]
		 	}
		}

		if [message] =~ /^Starting session:/ {
			mutate {
				add_tag => [ "ssh.session_started" ]
		 	}
		}
		if [message] =~ /^Close session:/ {
			mutate {
		 		add_tag => [ "ssh.session_closed" ]
		 	}
		}
		if [message] =~ /^Disconnected from:/ {
 			mutate {
		 		add_tag => [ "ssh.connection_closed" ]
		 	}
		}
		if [message] =~ /^Failed/ {
 			mutate {
		 		add_tag => [ "ssh.auth_fail" ]
		 	}
		}
		if [message] =~ /^Accepted/ {
			mutate {
		 		add_tag => [ "ssh.auth_success" ]
		 	}
		}
		geoip {
			source => "clientip"
		}
	}
}